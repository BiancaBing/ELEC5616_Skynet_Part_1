import struct
from Crypto.Cipher import AES
from Crypto.Hash import MD5
from Crypto.Hash import HMAC
from lib.crypto_utils import ANSI_X923_pad, ANSI_X923_unpad
from dh import create_dh_key, calculate_dh_secret

from Crypto.Signature import PKCS1_PSS
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA
from Crypto import Random

class StealthConn(object):
    def __init__(self, conn, client=False, server=False, verbose=False):
        self.conn = conn
        self.cipher = None
        self.client = client
        self.server = server
        self.verbose = verbose
        self.initiate_session()
        self.shared_hash = b''

    def initiate_session(self):
        # Perform the initial connection handshake for agreeing on a shared secret
        ### TODO: Your code here!
        # This can be broken into code run just on the server or just on the clientasdsad
        if self.server or self.client:
            my_public_key, my_private_key = create_dh_key()
            # Send them our public key
            self.send(bytes(str(my_public_key), "ascii"))
            # Receive their public key
            their_public_key = int(self.recv())
            # Obtain our shared secret
            shared_hash = calculate_dh_secret(their_public_key, my_private_key)
            self.shared_hash = shared_hash.encode("ascii")
            print("Shared hash: {}".format(shared_hash))
        self.cipher = AES.new(shared_hash[:32])
    def send(self, data):
        if self.cipher:
            padded_m = ANSI_X923_pad(data, AES.block_size)
            encrypted_data = self.cipher.encrypt(padded_m)
            mac = HMAC.new(self.shared_hash, digestmod=MD5)
            mac.update(encrypted_data)
            md5 = mac.hexdigest().encode("ascii")
            pkt_len = struct.pack('H', len(encrypted_data)+len(md5))
            self.conn.sendall(pkt_len)
            self.conn.sendall(md5)
            self.conn.sendall(encrypted_data)
            if self.verbose:
                print("Original data: {}".format(data))
                print("Encrypted data: {}".format(repr(encrypted_data)))
                print("Sending packet of length {}".format(len(encrypted_data)))
                print("The HMAC using md5 is {}".format(md5))
                print("The length of HMAC is {}".format(len(md5)))
                print("The length of 'H' is {}".format(struct.calcsize('H')))
        else:
            encrypted_data = data
            pkt_len = struct.pack('H', len(encrypted_data))
            self.conn.sendall(pkt_len)
            self.conn.sendall(encrypted_data)


    def recv(self):
        # Decode the data's length from an unsigned two byte int ('H')


        if self.cipher:
            pkt_len_packed = self.conn.recv(struct.calcsize('H'))
            unpacked_contents = struct.unpack('H', pkt_len_packed)
            pkt_len = unpacked_contents[0]
            all_data = bytearray(self.conn.recv(pkt_len))
            md5_received = bytes(all_data[:32])
            encrypted_data = bytes(all_data[32:])
            mac = HMAC.new(self.shared_hash, digestmod=MD5)
            mac.update(encrypted_data)
            md5_recalculate = mac.hexdigest().encode("ascii")
            padded_c = self.cipher.decrypt(encrypted_data)
            data = ANSI_X923_unpad(padded_c, AES.block_size)
            if self.verbose:
                print("Receiving packet of length {}".format(pkt_len))
                print("Encrypted data: {}".format(repr(encrypted_data)))
                print("MD5 received: {}".format(md5_received))
                print("MD5 calculated with received: {}".format(md5_recalculate))
                if md5_recalculate == md5_received:
                    print("The data received correctly!")
                else:
                    print("The data was corrupted!")
                print("Original data: {}".format(data))

        else:
            pkt_len_packed = self.conn.recv(struct.calcsize('H'))
            unpacked_contents = struct.unpack('H', pkt_len_packed)
            pkt_len = unpacked_contents[0]
            encrypted_data = self.conn.recv(pkt_len)
            data = encrypted_data

        return data

    def close(self):
        self.conn.close()
